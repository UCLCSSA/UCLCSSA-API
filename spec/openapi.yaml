openapi: 3.0.0
info:
  version: '0.1.0'
  
  title: 'UCLCSSA'

  termsOfService: 'https://github.com/UCLCSSA/UCLCSSA-API/blob/master/TOS.md'
  license:
    name: 'GPL-3.0'
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
  x-logo:
    # TODO: replace logo with custom logo
    url: 'https://apis.guru/openapi-template/logo.png'
  
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This document describes the API provided for the UCLCSSA WeChat app.
    
    # OpenAPI Specification
    UCLCSSA's API is intended to conform to OpenAPI 3.0.

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Posts
    description: Operations for user posts (could be used for post feed).
  - name: Images
    description: Operations for uploaded images.
servers:
  - url: 'https://www.uclcssa.com/api'

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/posts':
  
    get:
      tags:
        - Posts
      summary: Get a collection of posts (a feed).
      description: |
        Retrieves a collection of posts, can be used to build a feed. By default
        only the most recent 20 posts are returned, unless `offset` and 
        `limit` is specified. Note that the maximum posts returned at 
        once is capped at 100.
      operationId: getPosts
      parameters:
        - name: offset
          in: query
          description: Starting post `id` to start fetch from (inclusive).
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of posts to return starting from `id`.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      security:
        - main_auth:
            - 'read:posts'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '403':
          description: Access forbidden

  '/posts/{id}':
  
    get:
      tags:
        - Posts
      summary: Get post by id.
      description: |
        Retrieves a post with a given `id`.
      operationId: getPostById
      parameters:
        - name: id
          in: path
          description: Target post `id`.
          required: true
          schema:
            type: integer
            minimum: 1
      security:
        - main_auth:
            - 'read:post'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Access forbidden
        '404':
          description: Post not found or no longer available

  '/images/{id}/{timestamp}':
  
    get:
      tags:
        - Images
      summary: Get image by user ID and timestamp (as file name).
      parameters:
        - name: id
          in: path
          description: Image uploader (owner).
          required: true
          schema:
            type: integer
            minimum: 1
        - name: timestamp
          in: path
          description: Image timestamp (file name).
          required: true
          schema:
            type: integer
            minimum: 0
      security: 
        - main_auth:
          - 'read:image'
      responses:
        '200':
          description: Success
          content:
            image/gif:
              schema:
                description: Returns a GIF
                type: string
                format: binary
            image/jpeg:
              schema:
                description: Returns a JPEG
                type: string
                format: binary
            image/png:
              schema:
                description: Returns a PNG
                type: string
                format: binary
            image/tiff:
              schema:
                description: Returns a TIFF
                type: string
                format: binary

# An object to hold reusable parts that can be used across the spec
components:
  schemas:
    Posts:
      type: object
      properties:
        data:
          description: List of posts
          type: array
          items:
            $ref: '#/components/schemas/Post'
      required: 
        - data
    
    Post:
      type: object
      properties:
        id:
          description: Post unique identifier
          type: integer
          example: 123
        author:
          $ref: '#/components/schemas/User'
        time:
          description: Post timestamp (see [RFC3339](https://tools.ietf.org/html/rfc3339))
          type: integer
          minimum: 0
        images:
          description: Images contained within post
          type: array
          items:
            $ref: '#/components/schemas/Image'
        likedBy:
          description: Ids of users who liked the post
          type: array
          items:
            type: integer
            minimum: 1
        category:
          description: Category of post
          type: string
          example: accomodation
        content:
          description: Post content
      required: 
        - id
        - author
        - time
        - images
        - likedBy
        - category
          
    User:
      type: object
      properties:
        id:
          description: Unique identifier for the user
          type: integer
          minLength: 1
        email:
          $ref: '#/components/schemas/Email'
        avatar:
          description: URL to user's avatar
          type: string
        likedPosts:
          description: Ids of posts which the user liked
          type: array
          items: 
            type: integer
            minimum: 1
      required: 
        - id
    
    Email:
      description: Email address
      type: string
      minLength: 4
      example: john.smith@example.com
    
    Image:
      description: |
        Upon uploading the image to the server, the image file is renamed to the
        format of `{userId}-{timestamp}.{ext}`. This allows us, if needed, to 
        wipe all of the data of a user should he or she desire to do so.
      type: object
      properties:
        fileName:
          type: string
          pattern: '^\d+-\d+\.[a-zA-Z0-9]+$'
          minLength: 3
  
  # Security scheme definitions that can be used across the specification.
  securitySchemes:
    main_auth:
      type: oauth2 # authorization type, one of: oauth2, apiKey, http
      flows:
        implicit:
          authorizationUrl: 'http://www.uclcssa.cn/api/oauth/dialog'
          scopes:
            'read:post': read individual post
            'write:post': modify or remove individual post
            'read:posts': read posts
            'write:posts': modify or remove posts
            'read:user': read individual user information
            'write:user': modify or remove individual user information
            'read:users': read users information
            'write:users': modify or remove users
            'read:image': read individual image
            'write:image': modify or remove individual image
            'read:images': read images
            'write:images': write images
